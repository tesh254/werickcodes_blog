<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Werick Codes</title>
    <link>/tags/javascript/</link>
    <description>Recent content in javascript on Werick Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 1960-2095, Erick Wachira; all rights reserved.</copyright>
    <lastBuildDate>Sat, 28 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Build Electron Apps With React</title>
      <link>/blog/how-to-build-electron-apps-with-react/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-to-build-electron-apps-with-react/</guid>
      <description>Introduction I have always had a deep interest in writing Desktop applications. What was holding me off throughout the years was, I wasn&amp;rsquo;t interested in learning C++ or Java to make them. I wanted to build Desktop apps with Javascript, so I landed on Electron, a Javascript Desktop application framework, developed and maintained by Github.
Electron is such a big deal that it will allow you to create Desktop apps for all the major OS with a single codebase.</description>
    </item>
    
    <item>
      <title>How to Write Javascript in Es6 With Nodejs</title>
      <link>/blog/how-to-write-javascript-in-es6-with-nodejs/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-to-write-javascript-in-es6-with-nodejs/</guid>
      <description>You building an application with React and Node. You write your React code in ES6 but when you visit your Node backend code you happen to write in ES5. I found this quite annoying due to the change and also the require method. If you feel you are comfortable writing ES5 Node, you can skip this blog but if you might like making your frontend and backend switch quite seamless as we wait to figure out deno, you are in luck, because I will guide you in all the steps you will have to undertake and I have an existing NodeJS ES6 template setup already on Github.</description>
    </item>
    
    <item>
      <title>How to Add a Dark Mode to Your React Web App</title>
      <link>/blog/how-to-add-a-dark-mode-to-your-react-web-app/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-to-add-a-dark-mode-to-your-react-web-app/</guid>
      <description>We are currently living in a dark mode in everything era. Most apps nowadays come with a switch either at the navbar or just somewhere around its settings, that you just click and the screen goes dark. Some apps even come with dark mode as default, example Mixer , even Netflix has a dark mode by default.
Having a dark mode will really help in reducing the tiring of eyes caused by light modes and by the end of this article, you should be able to add dark mode to your Reactjs app in a few minutes.</description>
    </item>
    
    <item>
      <title>Getting Started With Nextjs Part 1</title>
      <link>/blog/getting-started-with-nextjs-part-1/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/getting-started-with-nextjs-part-1/</guid>
      <description>Hey Coder, I blogged about why you should learn Next in this blog. For this part of the series, I will guide through the features that next brings to the table.
 Note: You should have NodeJS, npm, and npx installed. You should be proficient in Javascript and React.
 Setting up our project. You can create your own repo or clone my repo.
$ git clone https://github.com/werickblog/react_next_app.git  Change directory to where your repo is housed locally</description>
    </item>
    
    <item>
      <title>How to Create a Node App Within a Docker Container With Mongo</title>
      <link>/blog/how-to-create-a-node-app-within-a-docker-container-with-mongo/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-to-create-a-node-app-within-a-docker-container-with-mongo/</guid>
      <description>Introduction This is the second part of the series for Docker meets NodeJS where we are going to introduce a database service, MongoDB, which we will connect to it with our Node app through a network.
 Note: Since we are introducing a new database service, by doing so this also makes our Node app also a service
Note: Ensure you go through the first part of this series since it contains a huge part of how we created our Node app within a Docker container.</description>
    </item>
    
  </channel>
</rss>